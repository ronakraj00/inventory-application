extends layout 

block content 
    h1="Browse "+title
    a(href="item/create" class="create") Create a New Item
    if itemsOfCollection.length === 0
        br
        br
        br
        p(style="margin-top:50px;") Nothing here
    else
        ul(style="margin:0px;padding:0px",class="layout")
            each item in itemsOfCollection
                li(style="list-style:none;margin-top:20px" class="card")
                    div(class="item-img")
                        img(src=item.img?"data:image/image/png;base64,"+item.img.toString('base64'):"../images/placeholder_image.webp")
                    div(class="not-center")
                        p(class="title") #{item.name}
                        if item.description 
                            p(class="description") #[strong Description:] 
                                br
                                span #{item.description}
                        if !item.category.join()==""
                            p #[strong Category:] #{item.category}
                        if item.price
                            p #[strong Price:] #{item.price}
                        if item.stock
                            p #[strong Stock:] #{item.stock}
                        if(user)
                            div(class="delete-update")
                                a(href=`/collection/item/delete/${item._id}`,class="delete") delete
                                a(href=`/collection/item/update/${item._id}`,class="delete") update
    
    script(type="text/javascript").
        const elements = document.querySelectorAll('.card');
        const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0.4
        }
        const callbacks = (entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting){
            entry.target.classList.add('active');
            //- entry.target.classList.remove('inactive');
            }else{
            //- entry.target.classList.remove('active');
            //- entry.target.classList.add('inactive');
            }
        });
        }
        let observer = new IntersectionObserver(callbacks, options);
        elements.forEach(element => {
        observer.observe(element);
        });