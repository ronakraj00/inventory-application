extends layout 

block content 
    h1=title
    form(method="POST",action="",enctype="multipart/form-data")
        label(for="name") Name 
            br
            input(id="name" name="name" type="text" maxlength=30 minlength=1 value= item && item.name)

        br
        label(for="img") Choose a Image File 
            br
            input(type="file" id="img" name="img" accept="image/*" value=item && item.img)
        br
        label(for="description") description 
            br
            input(id="description" name="description" maxlength=500 type="text" value=item && item.description)

        br
        label(for="collection") Choose a Collection
            br
            select( id="collection" name="collection" )
                each collection in allCollections 
                    if item
                        if collection.id==item.collection 
                            option(value=collection.id selected="selected")=collection.name
                        else
                            option(value=collection.id )=collection.name
                    else 
                        option(value=collection.id )=collection.name
                    
                    
        br
        label(for="category") category 
            br
            input(id="category" name="category" type="text" value= item && item.category.join(""))

        br
        label(for="price") price 
            br
            input(id="price" name="price" type="number" min="0" value=item && item.price)

        br
        label(for="stock") stock 
            br
            input(id="stock" name="stock" type="number" min="0" value=item && item.stock)

        br
        
        //- p(style="margin:0px;padding:0px;font-weight:700") OR
        //- label(for="img-url") Enter A URL of image
        //-     br
        //-     input(type="text" id="img-url" name="imgUrl" value=item && item.img)
        //- br
        input(type="submit")
    if errors
        each error in errors 
            li(style="color:red")=error.msg
    


    script(defer type="text/javascript").
        const compressImage = async (file, { quality = 1, type = file.type }) => {
            // Get as image data
            const imageBitmap = await createImageBitmap(file);

            // Draw to canvas
            const canvas = document.createElement('canvas');
            canvas.width = imageBitmap.width;
            canvas.height = imageBitmap.height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(imageBitmap, 0, 0);

            // Turn into Blob
            const blob = await new Promise((resolve) =>
                canvas.toBlob(resolve, type, quality)
            );

            // Turn Blob into File
            return new File([blob], file.name, {
                type: blob.type,
            });
        };

        // Get the selected file from the file input
        const input1 = document.querySelector('#img');
        input1.addEventListener('change', async (e) => {
            // Get the files
            const { files } = e.target;



            // No files selected
            if (!files.length) return;

            // We'll store the files in this data transfer object
            const dataTransfer = new DataTransfer();

            // For every file in the files list
            for (const file of files) {
                // We don't have to compress files that aren't images
                if(file.size>2097152*2){
                    alert("Image size is too big")
                    console.log("Before clearing:", e.target.files);
                    e.target.value="";
                    return
                    console.log("After clearing:", e.target.files);
                }

                if (!file.type.startsWith('image')) {
                    // Ignore this file, but do add it to our result
                    dataTransfer.items.add(file);
                    continue;
                }

                // We compress the file by 50%
                const compressedFile = await compressImage(file, {
                    quality: 0.2,
                    type: 'image/webp',
                });

                // Save back the compressed file instead of the original file
                dataTransfer.items.add(compressedFile);
            }

            // Set value of the file input to our new files list
            e.target.files = dataTransfer.files;
        });